[{"/home/user/MyLinuxProjects/delolive/frontend/src/index.tsx":"1","/home/user/MyLinuxProjects/delolive/frontend/src/App.tsx":"2","/home/user/MyLinuxProjects/delolive/frontend/src/store/store.ts":"3","/home/user/MyLinuxProjects/delolive/frontend/src/pages/NewsPage.tsx":"4","/home/user/MyLinuxProjects/delolive/frontend/src/pages/Main.tsx":"5","/home/user/MyLinuxProjects/delolive/frontend/src/pages/Registration.tsx":"6","/home/user/MyLinuxProjects/delolive/frontend/src/components/globalSlices/scroll.ts":"7","/home/user/MyLinuxProjects/delolive/frontend/src/components/globalSlices/windowWidthSlice.ts":"8","/home/user/MyLinuxProjects/delolive/frontend/src/components/globalSlices/registrationSlice.ts":"9","/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/Footer/Footer.tsx":"10","/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/Navbar/Navbar.tsx":"11","/home/user/MyLinuxProjects/delolive/frontend/src/components/NewsListBS.tsx":"12","/home/user/MyLinuxProjects/delolive/frontend/src/components/InsuranceComp.tsx":"13","/home/user/MyLinuxProjects/delolive/frontend/src/components/SpeciesInsurance.tsx":"14","/home/user/MyLinuxProjects/delolive/frontend/src/components/TriggersList.tsx":"15","/home/user/MyLinuxProjects/delolive/frontend/src/components/AboutUs.tsx":"16","/home/user/MyLinuxProjects/delolive/frontend/src/classes/axiosRequests.ts":"17","/home/user/MyLinuxProjects/delolive/frontend/src/components/News.tsx":"18","/home/user/MyLinuxProjects/delolive/frontend/src/components/SpecialOffers.tsx":"19","/home/user/MyLinuxProjects/delolive/frontend/src/components/RegistrationForm.tsx":"20","/home/user/MyLinuxProjects/delolive/frontend/src/components/UsefulButtons.tsx":"21","/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/Loader/Loader.tsx":"22","/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/Button/Button.tsx":"23","/home/user/MyLinuxProjects/delolive/frontend/src/components/NewsItem.tsx":"24","/home/user/MyLinuxProjects/delolive/frontend/src/components/InsuranceProg.tsx":"25","/home/user/MyLinuxProjects/delolive/frontend/src/components/Trigger.tsx":"26","/home/user/MyLinuxProjects/delolive/frontend/src/components/NewsSlider.tsx":"27","/home/user/MyLinuxProjects/delolive/frontend/src/components/NewsWithoutSlider.tsx":"28","/home/user/MyLinuxProjects/delolive/frontend/src/components/OffersItem.tsx":"29","/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/Title/Title.tsx":"30","/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/FormInput/FormInput.tsx":"31","/home/user/MyLinuxProjects/delolive/frontend/src/hooks/useSizes.ts":"32","/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/subDescription/SubDescriptionEl.tsx":"33","/home/user/MyLinuxProjects/delolive/frontend/src/hooks/useDate.ts":"34","/home/user/MyLinuxProjects/delolive/frontend/src/components/globalSlices/authSlice.ts":"35","/home/user/MyLinuxProjects/delolive/frontend/src/services/AuthService.ts":"36","/home/user/MyLinuxProjects/delolive/frontend/src/http/index.ts":"37","/home/user/MyLinuxProjects/delolive/frontend/src/pages/AccountPage.tsx":"38","/home/user/MyLinuxProjects/delolive/frontend/src/pages/Login.tsx":"39","/home/user/MyLinuxProjects/delolive/frontend/src/components/LoginReasons.tsx":"40","/home/user/MyLinuxProjects/delolive/frontend/src/components/LoginForm.tsx":"41","/home/user/MyLinuxProjects/delolive/frontend/src/components/globalSlices/loginSlice.ts":"42","/home/user/MyLinuxProjects/delolive/frontend/src/components/styles/customStyles/h3Styles.ts":"43","/home/user/MyLinuxProjects/delolive/frontend/src/components/styles/customStyles/loginContainer.ts":"44","/home/user/MyLinuxProjects/delolive/frontend/src/pages/MailActivate.tsx":"45","/home/user/MyLinuxProjects/delolive/frontend/src/components/ActivateInfo.tsx":"46","/home/user/MyLinuxProjects/delolive/frontend/src/services/NewsService.ts":"47","/home/user/MyLinuxProjects/delolive/frontend/src/services/SpecialOffers.ts":"48","/home/user/MyLinuxProjects/delolive/frontend/src/services/CitiesService.ts":"49","/home/user/MyLinuxProjects/delolive/frontend/src/components/globalSlices/burgerSlice.ts":"50"},{"size":718,"mtime":1680542086398,"results":"51","hashOfConfig":"52"},{"size":2211,"mtime":1694035655919,"results":"53","hashOfConfig":"52"},{"size":835,"mtime":1692532002731,"results":"54","hashOfConfig":"52"},{"size":1249,"mtime":1692448716858,"results":"55","hashOfConfig":"52"},{"size":2108,"mtime":1694031564598,"results":"56","hashOfConfig":"52"},{"size":641,"mtime":1691744505809,"results":"57","hashOfConfig":"52"},{"size":463,"mtime":1682974091718,"results":"58","hashOfConfig":"52"},{"size":2108,"mtime":1682974091718,"results":"59","hashOfConfig":"52"},{"size":2000,"mtime":1691693289265,"results":"60","hashOfConfig":"52"},{"size":5470,"mtime":1692533863033,"results":"61","hashOfConfig":"52"},{"size":8321,"mtime":1693938590955,"results":"62","hashOfConfig":"52"},{"size":1304,"mtime":1680714533908,"results":"63","hashOfConfig":"52"},{"size":2654,"mtime":1682974091714,"results":"64","hashOfConfig":"52"},{"size":3211,"mtime":1683456161262,"results":"65","hashOfConfig":"52"},{"size":952,"mtime":1678893197748,"results":"66","hashOfConfig":"52"},{"size":3494,"mtime":1688652131364,"results":"67","hashOfConfig":"52"},{"size":1572,"mtime":1691234622099,"results":"68","hashOfConfig":"52"},{"size":1171,"mtime":1692448297304,"results":"69","hashOfConfig":"52"},{"size":2209,"mtime":1682974091718,"results":"70","hashOfConfig":"52"},{"size":9533,"mtime":1694031486614,"results":"71","hashOfConfig":"52"},{"size":2165,"mtime":1682974091718,"results":"72","hashOfConfig":"52"},{"size":434,"mtime":1682165893722,"results":"73","hashOfConfig":"52"},{"size":1508,"mtime":1680371062408,"results":"74","hashOfConfig":"52"},{"size":1884,"mtime":1692450928609,"results":"75","hashOfConfig":"52"},{"size":7276,"mtime":1685007845399,"results":"76","hashOfConfig":"52"},{"size":2752,"mtime":1685006975205,"results":"77","hashOfConfig":"52"},{"size":2163,"mtime":1682974091714,"results":"78","hashOfConfig":"52"},{"size":2099,"mtime":1681067038926,"results":"79","hashOfConfig":"52"},{"size":1459,"mtime":1692526389252,"results":"80","hashOfConfig":"52"},{"size":692,"mtime":1678707749838,"results":"81","hashOfConfig":"52"},{"size":13201,"mtime":1691598444022,"results":"82","hashOfConfig":"52"},{"size":1825,"mtime":1683461930855,"results":"83","hashOfConfig":"52"},{"size":615,"mtime":1680092390533,"results":"84","hashOfConfig":"52"},{"size":246,"mtime":1683462418487,"results":"85","hashOfConfig":"52"},{"size":4497,"mtime":1691691862608,"results":"86","hashOfConfig":"52"},{"size":702,"mtime":1691431809758,"results":"87","hashOfConfig":"52"},{"size":379,"mtime":1692450835941,"results":"88","hashOfConfig":"52"},{"size":156,"mtime":1680547109741,"results":"89","hashOfConfig":"52"},{"size":558,"mtime":1691743508169,"results":"90","hashOfConfig":"52"},{"size":2271,"mtime":1691684636727,"results":"91","hashOfConfig":"52"},{"size":4370,"mtime":1691692343366,"results":"92","hashOfConfig":"52"},{"size":1077,"mtime":1691597969218,"results":"93","hashOfConfig":"52"},{"size":230,"mtime":1691743440797,"results":"94","hashOfConfig":"52"},{"size":159,"mtime":1691743501966,"results":"95","hashOfConfig":"52"},{"size":359,"mtime":1691744758981,"results":"96","hashOfConfig":"52"},{"size":1187,"mtime":1691746417490,"results":"97","hashOfConfig":"52"},{"size":269,"mtime":1692446856920,"results":"98","hashOfConfig":"52"},{"size":269,"mtime":1692526124774,"results":"99","hashOfConfig":"52"},{"size":303,"mtime":1692527492492,"results":"100","hashOfConfig":"52"},{"size":446,"mtime":1692533002907,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1iizhxg",{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229"},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236"},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/user/MyLinuxProjects/delolive/frontend/src/index.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/App.tsx",["264"],[],"import React from 'react';\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'swiper/swiper.css'\nimport Navbar from './components/UI/Navbar/Navbar';\nimport Main from './pages/Main';\nimport { useDispatch } from 'react-redux';\nimport { resize } from './components/globalSlices/windowWidthSlice';\nimport { scrolling } from './components/globalSlices/scroll';\nimport { useEffect } from 'react';\nimport Footer from './components/UI/Footer/Footer';\nimport { \n  createBrowserRouter, \n  createRoutesFromElements,\n  Route,\n  Outlet,\n  RouterProvider,\n  createHashRouter\n } from 'react-router-dom';\nimport NewsPage, { NewsPageLoader } from './pages/NewsPage';\nimport Registration from './pages/Registration';\nimport { checkAuth } from './components/globalSlices/authSlice';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { RootState } from './store/store';\nimport AccountPage from './pages/AccountPage';\nimport Login from './pages/Login';\nimport MailActivate from './pages/MailActivate';\n\nfunction App() {\n  const router = createHashRouter(\n    createRoutesFromElements(\n      <Route path=\"/\" element={<Root />}>\n        <Route index element={<Main/>} />\n        <Route path='/news' element={<NewsPage/>} loader={NewsPageLoader} />\n        <Route path='/registration' element={<Registration/>}/>\n        <Route path='/login' element={<Login/>}/>\n        <Route path='/account' element={<AccountPage/>}/>\n        <Route path='/registration/activate' element={<MailActivate/>}/>\n      </Route>\n    )\n  );\n\n  type AppDispatch = ThunkDispatch<RootState, void, any>;\n  const dispatch: AppDispatch = useDispatch();\n\n  \n  useEffect(() => {\n    dispatch(resize())\n\n    if(localStorage.getItem('token')){\n      console.log(localStorage.getItem('token'))\n      dispatch(checkAuth())\n    }\n  })\n\n  window.addEventListener('resize', () => {\n      dispatch(resize())\n  }, true);\n  window.addEventListener('scroll', () => {\n      dispatch(scrolling())\n}, true);\n\n  return (\n    <div className='App'>\n      <RouterProvider router={router}/>\n    </div>\n  );\n}\n\nconst Root = () => {\n  return(\n    <>\n      <Navbar/>\n      <div>\n        <Outlet/>\n      </div>\n      <Footer/>\n    </>\n  )\n}\n\nexport default App;\n","/home/user/MyLinuxProjects/delolive/frontend/src/store/store.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/pages/NewsPage.tsx",["265"],[],"import React, { useEffect } from 'react';\nimport { useLoaderData, useNavigation } from 'react-router-dom';\nimport NewsItemType from '../types/NewsItem';\nimport Loader from '../components/UI/Loader/Loader';\nimport NewsListBS from '../components/NewsListBS';\nimport NewsService from '../services/NewsService';\n\nconst NewsPage = () => {\n    const NewsList: NewsItemType[] = useLoaderData() as NewsItemType[]\n    const navigation = useNavigation()\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [navigation.state])\n\n    if(navigation.state == 'loading'){\n        return (\n            <div className=\"_container-1\">\n                <div className='loader-wrapper'>\n                    <Loader width={200} height={200}/>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className='NewsPage'>\n            <div className=\"_container-1\">\n                <NewsListBS NewsList={NewsList}/>\n            </div>\n        </div>\n    );\n};\n\nexport const NewsPageLoader = async () => {\n    try{\n        const response = await NewsService.fetchNews()\n        console.log(response)\n        return response.data\n    } catch(e: any) {\n        console.log(e.response?.data?.message);\n    }\n}\n\n    \n\nexport default NewsPage;","/home/user/MyLinuxProjects/delolive/frontend/src/pages/Main.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/pages/Registration.tsx",["266"],[],"import React from 'react';\nimport RegistrationForm from '../components/RegistrationForm';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../components/globalSlices/authSlice';\nimport { IUser } from '../types/interfaces/IUser';\nimport h3Styles from '../components/styles/customStyles/h3Styles';\n\nconst Registration = () => {\n    const user: IUser = useSelector(selectUser)\n\n    return (\n        <div>\n            <div className=\"_container-1\">\n                <h3 style={h3Styles}>Регистрация</h3>\n                <RegistrationForm/>\n            </div>\n        </div>\n    );\n};\n\nexport default Registration;","/home/user/MyLinuxProjects/delolive/frontend/src/components/globalSlices/scroll.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/globalSlices/windowWidthSlice.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/globalSlices/registrationSlice.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/Footer/Footer.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/Navbar/Navbar.tsx",["267","268","269","270"],[],"import React, { useState, useRef, useEffect } from 'react';\nimport { Form, Link } from 'react-router-dom';\nimport { NavItem, Nav, NavDropdown, FormControl } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Navbar.css'\nimport axiosRequests from '../../../classes/axiosRequests';\nimport Loader from '../Loader/Loader';\nimport HelpItem from '../../../types/HelpItem';\nimport { API_URL } from '../../../http';\nimport { useSelector } from 'react-redux';\nimport { selectIsAuth } from '../../globalSlices/authSlice';\nimport { AxiosResponse } from 'axios';\nimport CitiesService, { need } from '../../../services/CitiesService';\nimport { useDispatch } from 'react-redux';\nimport { selectBurgerValue, setBurgerValue } from '../../globalSlices/burgerSlice';\n\nconst Navbar = () => {\n    type nameDropdown = \"\" | \"city\" | \"help\"\n    type cityType = {\n        id: number,\n        title: string,\n        area?: string;\n        region?: string\n    }\n\n    const dispatch = useDispatch()\n    const burgerValue = useSelector(selectBurgerValue)\n\n    const isAuth = useSelector(selectIsAuth)\n\n    const [citiesValue, setCitiesValue] = useState <string>(\"\")\n\n    const [cities, setCities] = useState <cityType[]>([])\n    const [helps, setHelps] = useState <HelpItem[]>([])\n\n    const [isHoverDropdown, setIsHoverDropdown] = useState <nameDropdown>(\"\")\n    const [cityTitle, setCityTitle] = useState <string>('Город')\n    \n    const [firstCounter, setFirstCounter] = useState <number>(0);\n    const [sendTime, setSendTime] = useState <number>(1);\n    const [intervalId, setIntervalId] = useState <any>(null);\n    const [isLoading, setIsLoading] = useState <boolean>(false)\n\n    const liRefhelp = useRef <HTMLDivElement>(null)\n    const liRefcity = useRef <HTMLDivElement>(null)\n\n    let counter = 0\n\n    const onMouseEventHandler = (isName: nameDropdown) => {\n        setIsHoverDropdown(isName)\n    }\n    const getCities = async (need: need) => {\n        try {\n            const response: AxiosResponse = await CitiesService.fetchCities(need, citiesValue)\n            setCities(response.data)\n        } catch (error) {\n            console.log(error)\n        }\n        // axiosRequests.GET<cityType>(`${API_URL}/cities?q=${citiesValue}&need=${need}`)\n        // .then(response => setCities(response))\n        // .then(response => console.log(response))\n        // .catch(e => console.log(e))\n    }\n    const changeCitiesHandler = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        const inputValue = e.target.value\n        setCitiesValue(inputValue)\n\n        counter = 0\n        clearInterval(intervalId);\n        \n        setIntervalId(setInterval(() => {\n            counter = counter + 0.5\n            if (counter === sendTime) {\n                clearInterval(intervalId);\n                setIsLoading(false)\n                inputValue ? getCities(1) : getCities(0)\n                return\n            }\n            else if(!isLoading){\n                setIsLoading(true)\n            }\n        }, 500));\n\n    }\n\n    useEffect(() => {\n        if(firstCounter === 0){\n            getCities(0)\n            setFirstCounter(firstCounter + 1)\n\n            axiosRequests.GET<HelpItem>(`${API_URL}/helps`)\n            .then(response => setHelps(response))\n            .catch(e => console.log(e))\n        }\n        return () => clearInterval(intervalId);\n    }, [intervalId])\n    return (\n        <Nav className='Navbar'>\n            <div className=\"Navbar__wrapper\">\n                <div className=\"logo\"></div>\n                <div className=\"Navlist-Telephone\">\n                    \n                    <ul className=\"Navlist-Telephone__list\">\n\n                        <LinkContainer to=\"/\">\n                            <NavItem className=\"Navlist-Telephone__list__item text-focus-in\">Главная</NavItem>\n                        </LinkContainer>\n\n                        <LinkContainer to=\"/aboutUs\">\n                            <NavItem className=\"Navlist-Telephone__list__item text-focus-in\">О нас</NavItem>\n                        </LinkContainer>\n                        \n      \n                        <NavDropdown\n                            title={\"Помощь\"}\n                            style={{color: \"red\"}}\n                            ref={liRefhelp}\n                            className=\"Navbar-dropdown Navlist-Telephone__list__item_open text-focus-in\"\n                            id=\"basic-nav-dropdown\"\n                        >\n                            <div className=\"Nav-dropdown-content\">\n                                <NavDropdown.Item>Итем1</NavDropdown.Item>\n                                <NavDropdown.Item>Итем2</NavDropdown.Item>\n                                <NavDropdown.Item>Итем3</NavDropdown.Item>\n                                <NavDropdown.Item>Итем4</NavDropdown.Item>\n                            </div>\n                        </NavDropdown>\n                        \n                        <NavDropdown\n                            title={cityTitle}\n                            ref={liRefcity}\n                            onMouseEnter={() => onMouseEventHandler(\"city\")} \n                            onMouseLeave={() => onMouseEventHandler(\"city\")}\n                            onClick={() => onMouseEventHandler(\"city\")}\n                            className=\"Navbar-dropdown Navlist-Telephone__list__item_open text-focus-in\"\n                            id=\"basic-nav-dropdown\"\n                        >\n                            <Form>\n                                <FormControl type=\"text\"\n                                    placeholder='Поиск..'\n                                    className='mr-sm-2'\n                                    spellCheck={false}\n                                    onChange={changeCitiesHandler}\n                                    value={citiesValue}\n                                    style={{\n                                        boxShadow: 'none',\n                                        border: 'none',\n                                        borderBottom: '1px solid black',\n                                        borderBottomLeftRadius:'0px',\n                                        borderBottomRightRadius:'0px'\n                                    }}\n                                />\n                                \n                            </Form>\n                            <div className=\"NavDropItems\"\n                            style={isLoading ? {overflowY: 'hidden', display: 'flex', justifyContent: 'center', alignItems: 'center'}\n                             : {}}\n                            >\n                                {\n                                    !isLoading ?\n                                    cities.map((item: cityType) =>\n                                        <NavDropdown.Item\n                                            onClick={e => setCityTitle(e.currentTarget.innerText)}\n                                        >\n                                            {item.title}\n                                        </NavDropdown.Item>\n                                    )\n                                    :\n                                    <Loader width={84} height={50}/>\n                                }\n                            </div>\n                        </NavDropdown>\n                    </ul>\n                    <h3 className=\"Telephone\">+7 495 967 13 01</h3>\n\n                </div>\n                <Link className=\"Personal-nav\" to={ !isAuth ? '/registration' : '/account'}>\n                    <h5>Личный кабинет</h5>\n                    <div className=\"Personal-nav__icon\"></div>\n                </Link>\n                <div \n                    className=\"Burger-button\"\n                    onClick={() => {\n                        dispatch(setBurgerValue())\n                    }}\n                >\n                    <div className=\"Burger-button__el\"></div>\n                    <div className=\"Burger-button__el\"></div>\n                    <div className={burgerValue ? 'Burger-button__el_active' : 'Burger-button__el'}></div>\n                </div>\n               \n            </div>\n        </Nav>\n    );\n};\n\nexport default Navbar;","/home/user/MyLinuxProjects/delolive/frontend/src/components/NewsListBS.tsx",["271","272","273","274"],[],"import React, { FC, useEffect, useState } from 'react';\nimport NewsItemType from '../types/NewsItem';\nimport { Row, Col } from 'react-bootstrap';\nimport NewsItem from './NewsItem';\nimport './styles/NewsListBS/NewsListBS.css'\n\ninterface NewsListBSprops{\n    NewsList: NewsItemType[];\n}\n\nconst NewsListBS:FC<NewsListBSprops> = ({NewsList}) => {\n    return (\n        <div className='NewsListBS'>\n                {   \n                    NewsList.length !== 0 ?\n                    NewsList.map((item: NewsItemType) => \n                        <div className='NewsListBS__item'>\n                            <NewsItem\n                                style={{marginLeft: \"0px\", marginTop: '50px'}}\n                                key={item._id}\n                                image={item.image}\n                                _id={item._id}\n                                date={item.date}\n                                description={item.description}\n                                subDescription={item.subDescription}\n                            />\n                        </div>\n                    )\n                    :\n                    <div className='NoNews'>Список новостей пуст...</div> \n                }\n                \n        </div>\n    );\n};\n\nexport default NewsListBS;","/home/user/MyLinuxProjects/delolive/frontend/src/components/InsuranceComp.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/SpeciesInsurance.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/TriggersList.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/AboutUs.tsx",["275"],[],"import React from 'react';\nimport './styles/AboutUs/AboutUs.css'\nimport Title from './UI/Title/Title';\nimport { selectScroll } from './globalSlices/scroll';\nimport { useSelector } from 'react-redux';\n\nconst AboutUs = () => {\n\n    const scroll = useSelector(selectScroll)\n\n    return (\n        <div className='AboutUs'>\n            <Title hType=\"h1\">немного о нас</Title>\n            <div className=\"AboutUs__content\">\n\n                <div className=\"AboutUs__content__head\">\n                    <div className=\"AboutUs__content__head__wrapper\">\n\n                        <div className=\"AboutUs__content__head__wrapper__block\" data-psevdoText=\">\" id=\"block-cav1\">\n                            <div className=\"AboutUs__content__head__wrapper__block__text\">\n                                380<span className='littleText'>мил.руб.</span>\n                            </div>\n                            <div className=\"AboutUs__content__head__wrapper__block__subtext\">\n                                капитала\n                            </div>\n                        </div>\n\n                        <div className=\"AboutUs__content__head__wrapper__block\" data-psevdoText=\"~\" id=\"block-tilda\">\n                            <div className=\"AboutUs__content__head__wrapper__block__text\">\n                                78\n                            </div>\n                            <div className=\"AboutUs__content__head__wrapper__block__subtext\">\n                                региональных предстравительств\n                            </div>\n                        </div>\n                        \n                        <div className=\"AboutUs__content__head__wrapper__block\" data-psevdoText=\">\" id=\"block-cav\">\n                            <div className=\"AboutUs__content__head__wrapper__block__text\">\n                                20\n                            </div>\n                            <div className=\"AboutUs__content__head__wrapper__block__subtext\">\n                                лет на рынке страховых услуг\n                            </div>\n                        </div>\n                        \n                        <div className=\"AboutUs__content__head__wrapper__block\">\n                            <div className=\"AboutUs__content__head__wrapper__block__text\">\n                                ruВВВ\n                            </div>\n                            <div className=\"AboutUs__content__head__wrapper__block__subtext\">\n                                высокий уровень надежности \n                            </div>\n                        </div>\n                        \n                    </div>\n                    \n                </div>\n                <div className=\"AboutUs__content__foot\">\n                   <div className=\"AboutUs__content__foot__img-cont\" id=\"foot-image1\"></div>\n                   <div className=\"AboutUs__content__foot__img-cont\" id=\"foot-image2\"></div>\n                   <div className=\"AboutUs__content__foot__img-cont\" id=\"foot-image3\"></div>\n                   <div className=\"AboutUs__content__foot__img-cont\" id=\"foot-image4\"></div>\n                   <div className=\"AboutUs__content__foot__img-cont\" id=\"foot-image5\"></div>\n                   <div className=\"AboutUs__content__foot__img-cont\" id=\"foot-image6\"></div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AboutUs;","/home/user/MyLinuxProjects/delolive/frontend/src/classes/axiosRequests.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/News.tsx",["276","277"],[],"import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectWidth } from './globalSlices/windowWidthSlice';\nimport NewsSlider from './NewsSlider';\nimport NewsWithoutSlider from './NewsWithoutSlider';\nimport './styles/News/News.css'\nimport Title from './UI/Title/Title';\nimport NewsItemType from '../types/NewsItem';\nimport axiosRequests from '../classes/axiosRequests';\nimport { API_URL } from '../http';\nimport NewsService from '../services/NewsService';\n\nconst News = () => {\n    const windowWidth = useSelector(selectWidth) as number\n    const [NewsList, setNewsList] = useState <NewsItemType[]>([])\n\n    const getNews = async () => {\n        const response  = await NewsService.fetchNews()\n        setNewsList(response.data)\n    }\n\n    useEffect(() => {\n        getNews()\n    }, [])\n\n    return (\n        <div className='News'>\n             <Title hType='h1'>новости</Title>\n            {\n                windowWidth > 1000 ?\n                <NewsWithoutSlider NewsList={NewsList} /> :\n                <NewsSlider NewsList={NewsList.slice(0, 30)}/>\n            } \n        </div>\n    );\n};\n\nexport default News;","/home/user/MyLinuxProjects/delolive/frontend/src/components/SpecialOffers.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/RegistrationForm.tsx",["278","279","280","281"],[],"import React, { useEffect, useState } from 'react';\nimport './styles/RegistrationForm/RegistrationForm.css'\nimport { Col, Row } from 'react-bootstrap';\nimport FormInput from './UI/FormInput/FormInput';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isSetPassword, validate, selectReg, selectUserData, registrate, setSendCounter, setUserData } from './globalSlices/registrationSlice';\nimport { registration, selectIsAuth, selectIsEmailSend, selectIsLoading, selectIsLoadingForm, selectRegistrationError, setRegistrationError } from './globalSlices/authSlice';\nimport userModel from '../types/UserModel';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { RootState } from '../store/store';\nimport Loader from './UI/Loader/Loader';\nimport { Link, useNavigate } from 'react-router-dom';\n\n\nconst RegistrationForm = () => {\n    type AppDispatch = ThunkDispatch<RootState, void, any>;\n\n    const dispatch: AppDispatch = useDispatch();\n    const navigate = useNavigate();\n    const errorMessage = useSelector(selectRegistrationError)\n    const isReg = useSelector(selectReg)\n    const isMail = useSelector(selectIsEmailSend)\n    const allData: userModel = useSelector(selectUserData)\n    const isCheckPassword = useSelector(isSetPassword)\n    const isLoadingForm = useSelector(selectIsLoadingForm)\n    const isLoading = useSelector(selectIsLoading)\n    const isAuth = useSelector(selectIsAuth)\n\n    const [redirectCounter, setRedirectCounter] = useState <number>(0)\n    const [isChecked1, setIsChecked1] = useState <boolean>(false)\n    const [isChecked2, setIsChecked2] = useState <boolean>(false)\n    const [isSubmitDisabled, setIsSubmitDisabled] = useState <boolean>(false)\n\n    const isChecked1Handler = () => {\n        isChecked1 ? setIsChecked1(false) : setIsChecked1(true)\n        dispatch(setUserData({['isMailing']: !isChecked1}))\n    }\n    const isChecked2Handler = () => {\n        isChecked2 ? setIsChecked2(false) : setIsChecked2(true)\n    }\n    function areAllFieldsFilled(obj: object) {\n        for (var key in obj) {\n        // @ts-ignore\n        if(typeof obj[key] !== 'boolean') {\n            // @ts-ignore\n            if (obj[key].trim() === '' || typeof obj[key] !== 'string') {\n                return false;\n            }\n        }\n          \n        }\n        return true;\n    }\n    const sendALLData = () => {\n        console.log(allData)\n\n        if(areAllFieldsFilled(allData) && isCheckPassword){\n            console.log(allData)\n            console.log('sendDate')\n            dispatch(registration(allData));\n        }\n        else{\n            console.log('areAllFieldsFilled - ' + areAllFieldsFilled(allData))\n            console.log('checkPassword - ' + isCheckPassword)\n        }\n    }\n    const isRegSet = () => {\n        if(!isChecked2) {\n            dispatch(setRegistrationError('Для продолжения требуется согласие на обработку данных'))   \n        }\n        else {\n            console.log('valid')\n            dispatch(validate());\n            dispatch(setSendCounter())\n\n            setIsSubmitDisabled(true)\n\n            setTimeout(() => {\n                dispatch(registrate())\n                setIsSubmitDisabled(false)\n            }, 3000)\n        }\n    }\n    useEffect(() => {\n        sendALLData()\n    }, [isReg])\n\n    useEffect(() => {\n        if(redirectCounter !== 0) {\n            navigate('/registration/activate');\n        }\n        setRedirectCounter(1)\n    },[isMail])\n\n    if(isLoading) {\n        return(\n            <div style={{display:'flex', justifyContent: 'center', marginTop: 100}}>\n                <Loader width={100} height={100}></Loader>\n            </div>\n        )\n    }\n\n    return (\n        <div className='RegistrationForm' style={{marginTop: '73px'}}>\n            <form className=\"RegistrationForm__wrapper\">\n                <Row>\n                    <Col className='align-center-style'>\n                        <FormInput\n                        field='surname'\n                        indexOne = {true}\n                        placeholder='Иванов'\n                        title='Фамилия*'\n                        />\n                        <FormInput\n                        field='name'\n                        placeholder='Иван'\n                        title='Имя*'\n                        />\n                        <FormInput\n                        field='fatherName'\n                        placeholder='Иванович'\n                        title='Отчество'\n                        />\n                    </Col>\n                    <Col className='align-center-style'>\n                        <FormInput\n                        indexOne = {true}\n                        placeholder=''\n                        field='telephone'\n                        title='Телефон*'\n                        isTel={true}\n                        />\n                        <FormInput\n                        field='email'\n                        placeholder='mail@example.ru'\n                        title='E-mail*'\n                        validation={{\n                            minLength: 6,\n                            maxLength: 100,\n                            email: true\n                        }}\n                        />\n                        <FormInput\n                        field='password'\n                        placeholder='Придумайте пароль'\n                        title='Пароль*'\n                        isPassword={true}\n                        validation={{\n                            password: true,\n                            minLength: 5,\n                            maxLength: 50\n                        }}\n                        />\n                        <FormInput\n                        field='check'\n                        inputType='password'\n                        placeholder='Повторите пароль'\n                        checkPassword = {true}\n                        title='Подтверждение пароля*'\n                        validation={{\n                            minLength: 5,\n                            maxLength: 50\n                        }}\n                        />\n                    </Col>\n                    <Col className='align-center-style'>\n                        <div className='dop-info'>\n                            На указанные контактные данные придет код для подтверждения регистрации\n                        </div>\n                        <FormInput\n                        field='birthdate'\n                        placeholder='ДД.ММ.ГГГГ'\n                        title='Дата рождения*'\n                        errorMessage='Введите дату рождения'\n                        width={'small'}\n                        date={true}\n                        validation={{\n                            minLength: 0,\n                            maxLength: 100,\n                            birthday: true\n                        }}\n                        />\n                        <FormInput\n                        field='card'\n                        isCard={true}\n                        placeholder='1111 1111 1111 1111'\n                        title='Номер карты клиента*'\n                        isInfo={true}\n                        width={'small'}\n                        />\n                    </Col>\n                </Row>\n                {\n                    !isLoadingForm ?\n                        <div className=\"submitForm-container\">\n                            <div className=\"submitForm\">\n                                <div className=\"smsSystem\">\n                                    <h6>Подписка на рассылку</h6>\n                                    <input type='checkbox' name='sms' checked={isChecked1}/>\n                                    <label htmlFor=\"sms\" onClick={isChecked1Handler}></label>\n                                </div>\n                                <div className=\"personalDate\">\n                                    <h5>Согласие на обработку перональных данных </h5>\n                                    <input type='checkbox' name='data' checked={isChecked2}/>    \n                                    <label htmlFor=\"sms\" onClick={isChecked2Handler}></label>\n                                </div>\n                                {errorMessage ? <h4 className=\"Error-message\">{errorMessage}</h4> : ''}\n                                <input\n                                type=\"submit\"\n                                disabled={isSubmitDisabled}\n                                className='submitButton'\n                                value=\"Зарегестрироваться\"\n                                onClick={isRegSet}\n                                />\n                                <Link className=\"loginLink\" to='/login' >\n                                    Войти\n                                </Link>\n                            </div>\n                            \n                        </div>\n                    :\n                    <div style={{display:'flex', justifyContent: 'center', marginTop: 50}}>\n                        <Loader width={60} height={60}></Loader>\n                    </div>\n                }\n                \n            </form>\n        </div>\n    );\n};\n\nexport default RegistrationForm;","/home/user/MyLinuxProjects/delolive/frontend/src/components/UsefulButtons.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/Loader/Loader.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/Button/Button.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/NewsItem.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/InsuranceProg.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/Trigger.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/NewsSlider.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/NewsWithoutSlider.tsx",["282","283","284"],[],"import React, { FC, useEffect, useState } from 'react';\nimport NewsItem from './NewsItem';\nimport NewsItemType from '../types/NewsItem';\nimport './styles/NewsWithoutSlider/NewsWithoutSlider.css'\nimport Title from './UI/Title/Title';\nimport Button, { ButtonBorderVariant, ButtonTextVariant } from './UI/Button/Button';\nimport axiosRequests from '../classes/axiosRequests';\nimport { Link } from 'react-router-dom';\n\ninterface NewsWithoutSliderProps{\n    NewsList: NewsItemType[];\n}\n\nconst NewsWithoutSlider: FC<NewsWithoutSliderProps> = ({NewsList}) => {\n    \n    return (\n        <div className='NewsWithoutSlider'>\n            <div className=\"NewsList\">\n                {\n                    NewsList.length !== 0 ?\n                    NewsList.slice(0, 3).map((item: NewsItemType, index: number) =>\n                     <NewsItem\n                        _id={item._id}\n                        key={index + 1}\n                        date={item.date}\n                        description={item.description}\n                        image={item.image}\n                        subDescription={item?.subDescription}\n                    />\n                    )\n                    :\n                    <div className='NoNews'>\n                        <Title hType='h3'>Список новостей пуст....</Title>\n                    </div>\n                }\n            </div>\n            {\n                NewsList.length > 3 ?\n                <div className=\"buttonCont\">\n                    <Link to='/news' style={{textDecoration:\"none\"}}>\n                        <Button\n                            text='Смотреть все  -->'\n                            variantBorder={ButtonBorderVariant.black}\n                            variantText={ButtonTextVariant.black}\n                            height={50}\n                            width={265}\n                            margintop={38}\n                        />\n                    </Link>\n                </div>\n                :\n                <div></div>\n            }\n        </div>\n    );\n};\n\nexport default NewsWithoutSlider;","/home/user/MyLinuxProjects/delolive/frontend/src/components/OffersItem.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/Title/Title.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/FormInput/FormInput.tsx",["285","286","287","288","289","290","291"],[],"import React, { FC, useEffect, useState } from 'react';\nimport './FormInput.css'\nimport { useDate } from '../../../hooks/useDate'\nimport { selectValid, selectUserData, setIsSetPassword, setPassword, setPasswordUpdate, setUserData, selectSendCounter } from '../../globalSlices/registrationSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport IFormInputProps from '../../../types/interfaces/IFormInputProps';\nimport { selectLogin, selectLoginCounter, setLoginData } from '../../globalSlices/loginSlice';\n\nconst FormInput: FC<IFormInputProps> = ({\n    field,\n    placeholder,\n    isTel = false,\n    title,\n    checkPassword = false,\n    errorMessage,\n    validation = {\n        minLength: 1,\n        maxLength: 100,\n\n    },\n    isPassword = false,\n    isInfo = false,\n    isCard = false,\n    isLogin = false,\n    width = 'normal',\n    indexOne = false,\n    date = false,\n    inputType = \"text\"\n}) => {\n    const dispatch = useDispatch()\n    const selectedReg = useSelector(selectSendCounter)\n    const selectedLogin = useSelector(selectLoginCounter)\n    const userDateRedux = useSelector(selectUserData)\n    const checkPasswordDate = useSelector(setPassword)\n\n    const [passwordShow, setPasswordShow] = useState <boolean>(true)\n    const [counterSend, setCounterSend] = useState <number>(0)\n    const [isError, setIsError] = useState <boolean>(false)\n    const [ErrorMsg, setErrorMsg] = useState <string>('')\n    const [inputWidth, setInputWidth] = useState <number>(0)\n    const [marginTop, setMarginTop] = useState <number>(0)\n    const [telNum, setTelNum] = useState <string>('+7 (___) ___-__-_')\n    const [inputText, setInputText] = useState <string>('')\n    const [inputDate, setInputDate] = useState <string>(useDate())\n    const [cardText, setCardText] = useState <string>('')\n\n    const [sendTime, setSendTime] = useState <number>(1);\n    const [intervalId, setIntervalId] = useState <any>(null);\n\n    const passwordShowHandler = () => {\n        if(passwordShow){\n            setPasswordShow(false)\n            return\n        }\n        setPasswordShow(true)\n    }\n\n    const createErrorMsg = (msg: string) => {\n        setIsError(true)\n        setErrorMsg(msg)\n    }\n\n    const checkValid = (): boolean => {\n        let valid: boolean = false\n        let currentText;\n\n        if(date) currentText = inputDate\n        else if(isTel) currentText = telNum\n        else if(isCard) currentText = cardText\n        else currentText = inputText\n        \n        if(field === 'none') return false\n        if(validation.minLength <= currentText.length || isTel){\n            if(validation.maxLength >= currentText.length || isTel){\n                if(field !== 'birthdate' && field !== 'card' && field !== 'telephone' && field !== 'password' && field !== 'check'){\n                    currentText = currentText.trim()\n                    if (!/\\s/g.test(currentText)){\n                        setIsError(false)\n                        return true\n                    }\n                    else{\n                        createErrorMsg('Это поле не должно содержать знак пробела')\n                    }\n                }\n                else{\n                    if(isTel){\n                        if(currentText[0] === '+'){\n                            let newCT = currentText.substring(1)\n                            let newNewCT = newCT.replace('7','8');\n                            currentText = newNewCT\n                        }\n                        currentText = currentText.replaceAll(' ', '')\n                        currentText = currentText.replaceAll('-', '')\n                        currentText = currentText.replace('(', '')\n                        currentText = currentText.replace(')', '')\n                        \n                        if(validation.minLength < currentText.length){\n                            if(validation.maxLength >= currentText.length){\n                                setIsError(false)\n                                return true\n                            }\n                            else{\n                                createErrorMsg('Максимальное кол-во символов для этого поля - ' + String(validation.maxLength))\n                            }\n                        }\n                        else{\n                            createErrorMsg('Минимальное кол-во символов для этого поля - ' + String(validation.minLength))\n                        }\n                    }\n                    else if(isPassword){\n                        if(!/\\s/g.test(currentText) && !/-/g.test(currentText) && !/\\//g.test(currentText)){\n                            setIsError(false)\n                            return true\n                        }\n                        else{\n                            createErrorMsg('Пароль не должен содержать символов: \"пробел\" , \"/\" , \"/\"')\n                        }\n                    }\n                    else if(checkPassword){\n                        if(checkPasswordDate === inputText){\n                            setIsError(false)\n                            dispatch(setIsSetPassword(true))\n                            return true\n                        }\n                        else{\n                            createErrorMsg('Пароли не совпадают')\n                        }\n                    }\n                    else if(field === 'birthdate'){\n                        setIsError(false)\n                        return true\n                    }\n\n                    else if(field === 'card'){\n                        setIsError(false)\n                        return true\n                    }\n                    \n                }\n            }\n            else{\n                createErrorMsg('Максимальное кол-во символов для этого поля - ' + String(validation.maxLength))\n            }\n        }\n        else{\n            if(field === 'fatherName') {\n                setIsError(false)\n                return true\n            }\n            createErrorMsg('Минимальное кол-во символов для этого поля - ' + String(validation.minLength))\n        }\n        return valid\n    }\n    const sendLogin = () => {\n        let dataValue = inputText\n        if(inputText.length === 0) {\n            if(field === 'password') {\n                createErrorMsg('Введите пароль')\n            }\n            else {\n                createErrorMsg('Введите почту')\n            }\n        }\n        else {\n            setIsError(false)\n            dispatch(setLoginData({[field]: dataValue}))\n        }\n    }\n\n    const sendData = () => {\n        let dataValue;\n\n        if(date) dataValue = inputDate\n        else if(isTel) dataValue = telNum\n        else if(isCard) dataValue = cardText.replace(/\\s/g, \"\");\n        else dataValue = inputText\n        const valid: boolean = checkValid()\n\n        if(isTel){\n            if(dataValue[0] === '+'){\n                let newCT = dataValue.substring(1)\n                let newNewCT = newCT.replace('7','8');\n                dataValue = newNewCT\n            }\n            dataValue = dataValue.replaceAll(' ', '')\n            dataValue = dataValue.replaceAll('-', '')\n            dataValue = dataValue.replace('(', '')\n            dataValue = dataValue.replace(')', '')\n        }\n        if(!valid){\n            if(isTel) setTelNum('+7 (___) ___-__-_')\n            else setInputText('')\n        }\n\n        if(field !== 'none' && valid){\n            console.log('Отработало')\n            dispatch(setUserData({[field]: dataValue}))\n        }\n    }\n    let counter = 0\n    const inputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let inputValue: string = e.target.value\n        setInputText(inputValue)\n    }\n    const passwordHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let inputValue: string = e.target.value\n        counter = 0\n        clearInterval(intervalId);\n\n        setIntervalId(setInterval(() => {\n            counter = counter + 0.5\n            if (counter === sendTime) {\n                dispatch(setPasswordUpdate(inputValue))\n                clearInterval(intervalId);\n                return\n            }\n        }, 500));\n        setInputText(inputValue)\n\n    }\n    const dateHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let inputValue: string = e.target.value\n        setInputDate(inputValue)\n    }\n    const cardHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let inputValue: string = e.target.value\n        let beforeValue: string = ''\n        let counter = 0\n        \n        inputValue.replace(/\\s/g, \"\").split('').forEach((cv) => {\n\n            if(counter % 4 == 0) {\n                beforeValue = beforeValue + ' ' + cv\n            }\n            else {\n                beforeValue = beforeValue + cv\n            }\n            counter++\n        })\n        beforeValue = beforeValue.trim()\n        if(inputValue.replace(/\\s/g, \"\").length <= 16) {\n            setCardText(beforeValue)\n        }\n    }\n    const telNumHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        let inputValue: string = e.target.value\n\n        if(inputValue.length - 1 < 18 && Number(inputValue[inputValue.length - 1]) >= 0){\n            let copyInputValue: string[] = inputValue.split('')\n            copyInputValue.every((cv, i, arr) => {\n                if(cv === '_') {\n                    arr[i] = inputValue[inputValue.length - 1]\n                    arr[inputValue.length - 1] = ''\n                    return false\n                }\n                else return true\n            })\n\n            let newVal: string = copyInputValue.join('')\n            setTelNum(newVal)\n        }\n        else{\n            setTelNum(inputValue)\n        }\n\n    }\n    const getMarginTop = () => {\n        if(!indexOne){\n            if(isError){\n                setMarginTop(29)\n            }\n            else{\n                setMarginTop(53)\n            }\n        }\n    }\n    const getInputType = () => {\n        if(isPassword){\n            if(passwordShow) return 'password'\n            else return inputType\n        }\n        else if(date) return 'date'\n        else return inputType\n    }\n    \n    const getInputValue = () => {\n        if(isTel) return telNum\n        else if(isCard) return cardText\n        else if(date) return inputDate\n        else return inputText\n    }\n    const getWidth = () => {\n        if(inputWidth === 0){\n            let decrementWidth = 0\n            if(isPassword){\n                decrementWidth = 20\n            }\n            switch(width){\n                case 'normal':\n                    setInputWidth(265 - decrementWidth)\n                    break\n                case 'small':\n                    setInputWidth(165 - decrementWidth)\n                    break\n                case 'large':\n                    setInputWidth(365 - decrementWidth)\n                    break\n            }\n        }\n    }\n\n    useEffect(() => {\n        getWidth()\n        getMarginTop()\n    }, [])\n    useEffect(() => {\n        if(counterSend !== 0) {\n            if(isLogin) {\n                sendLogin()\n            }\n            else {\n                sendData()\n            }\n        }\n        setCounterSend(1)\n    }, [selectedReg, selectedLogin])\n    return (\n        <div className='FormInput' style={{marginTop: marginTop}}   >\n            <div className=\"FormInput__title\">{title}</div>\n            <div \n            style={{display: isPassword ? 'flex' : 'block', alignItems: 'center', maxWidth: inputWidth + 30}}\n            className={isError ? 'FormInput__bar_error' : 'FormInput__bar'}>\n                <input\n                style={{width: inputWidth}}\n                type={getInputType()}\n                onChange={isTel ? telNumHandler : date ? dateHandler : isPassword ? passwordHandler : isCard ? cardHandler: inputHandler}\n                value={getInputValue()}\n                autoComplete='new-password'\n                className='FormInput_input'\n                placeholder={isTel ? '+7(___)__-__-__' : placeholder}\n                />\n                {\n                    isPassword ? \n                    <div\n                    className={passwordShow ? 'password_show' : 'password_hide'}\n                    onClick={passwordShowHandler}\n                    ></div>\n                    :\n                    <div></div>\n                }\n                {\n                    isInfo ?\n                    <div className='info'></div>\n                    :\n                    <div></div>\n                }\n            </div>\n            {\n                isError ?\n                errorMessage\n                    ? \n                        <div className='FormInput__errorMessage' style={{maxWidth: inputWidth}}>{errorMessage}</div>\n                    :\n                        <div className='FormInput__errorMessage' style={{maxWidth: inputWidth}}>{ErrorMsg}</div>\n                :\n                <div></div>\n            }\n        </div>\n    );\n};\n\nexport default FormInput;","/home/user/MyLinuxProjects/delolive/frontend/src/hooks/useSizes.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/UI/subDescription/SubDescriptionEl.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/hooks/useDate.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/globalSlices/authSlice.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/services/AuthService.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/http/index.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/pages/AccountPage.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/pages/Login.tsx",["292"],[],"import React, { FC } from 'react';\nimport LoginReasons from '../components/LoginReasons';\nimport LoginForm from '../components/LoginForm';\nimport login_container_Styles from '../components/styles/customStyles/loginContainer';\n\nconst Login = () => {\n    return (\n        <div>\n            <div className='_container-1'>\n                <div className=\"login_container\" style={login_container_Styles}>\n                    <LoginForm/>\n                    <LoginReasons/>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Login;","/home/user/MyLinuxProjects/delolive/frontend/src/components/LoginReasons.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/LoginForm.tsx",["293","294"],[],"import React, { FC, useEffect, useState } from 'react';\nimport './styles/LoginForm/LoginForm.css'\nimport Title from './UI/Title/Title';\nimport FormInput from './UI/FormInput/FormInput';\nimport { Link } from 'react-router-dom';\nimport { logined, selectLogin, selectLoginData, setLoginCounter } from './globalSlices/loginSlice';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { RootState } from '../store/store';\nimport { useSelector } from 'react-redux';\nimport LoginModel from '../types/LoginModel';\nimport { login, selectIsLoading, selectIsLoadingForm, selectLoginError } from './globalSlices/authSlice';\nimport Loader from './UI/Loader/Loader';\n\n\nconst LoginForm: FC = () => {\n    type AppDispatch = ThunkDispatch<RootState, void, any>;\n    const dispatch: AppDispatch = useDispatch();\n\n    const allData: LoginModel = useSelector(selectLoginData)\n    const selectedLogin = useSelector(selectLogin)\n    const isLoading = useSelector(selectIsLoading)\n    const errorMessage = useSelector(selectLoginError)\n    const isLoadingForm = useSelector(selectIsLoadingForm)\n\n\n    function areAllFieldsFilled(obj: object) {\n        for (var key in obj) {\n        // @ts-ignore\n          if (typeof obj[key] !== 'string' || obj[key].trim() === '') {\n            return false;\n          }\n        }\n        return true;\n    }\n\n    const sendALLData = () => {\n        console.log(allData)\n        if(areAllFieldsFilled(allData)){\n            console.log(allData)\n            console.log('sendDate')\n            dispatch(login(allData.email, allData.password));\n            console.log('sendAllDataLogin')\n        }\n        else{\n            console.log('areAllFieldsFilled - ' + areAllFieldsFilled(allData))\n        }\n    }\n\n    const [isSubmitDisabled, setIsSubmitDisabled] = useState <boolean>(false)\n\n    const isLoginSet = () => {\n        dispatch(setLoginCounter())\n\n        setIsSubmitDisabled(true)\n\n        setTimeout(() => {\n            dispatch(logined())\n            setIsSubmitDisabled(false)\n        }, 3000)\n\n    }\n\n    useEffect(() => {\n        sendALLData()\n    }, [selectedLogin])\n\n    if(isLoading) {\n        return(\n            <div style={{display:'flex', justifyContent: 'center', marginTop: 100}}>\n                <Loader width={100} height={100}></Loader>\n            </div>\n        )\n    }\n\n\n    return (\n        <div className='LoginForm'>\n            <h3 className='LoginForm__title'>Добрый день!</h3>\n            <form className=\"LoginForm__wrapper\">\n                <div className=\"LoginForm__wrapper__form\">\n                    <div className=\"LoginForm__form__inputs\">\n                        <FormInput\n                        title='Логин'\n                        placeholder='Введите свой email'\n                        isLogin={true}\n                        field='email'\n                        width={'large'}\n                        />\n                        <FormInput\n                        title='Пароль'\n                        isPassword={true}\n                        isLogin={true}\n                        placeholder='Введите пароль'\n                        field='password'\n                        width={'large'}\n\n                        />\n                    </div>\n                    {errorMessage ? <h4 className=\"Error-message\">{errorMessage}</h4> : ''}\n                    <div className=\"submitContainer\">\n                        {!isLoadingForm ?\n                        <input\n                            type=\"submit\"\n                            className='submitButton'\n                            disabled={isSubmitDisabled}\n                            onClick={isLoginSet}\n                            value=\"Войти\"\n                        />\n                        :\n                        <div style={{display:'flex', justifyContent: 'center', marginTop: '50px'}}>\n                            <Loader width={60} height={60}></Loader>\n                        </div>\n                        }\n                        <Link className=\"registrationLink\" to='/registration' >\n                            Зарегистрироваться\n                        </Link>\n                    </div>\n                \n                </div>\n            </form>\n            \n        </div>\n    )\n};\n\nexport default LoginForm;","/home/user/MyLinuxProjects/delolive/frontend/src/components/globalSlices/loginSlice.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/styles/customStyles/h3Styles.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/styles/customStyles/loginContainer.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/pages/MailActivate.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/ActivateInfo.tsx",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/services/NewsService.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/services/SpecialOffers.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/services/CitiesService.ts",[],[],"/home/user/MyLinuxProjects/delolive/frontend/src/components/globalSlices/burgerSlice.ts",[],[],{"ruleId":"295","severity":1,"message":"296","line":13,"column":3,"nodeType":"297","messageId":"298","endLine":13,"endColumn":22},{"ruleId":"299","severity":1,"message":"300","line":15,"column":25,"nodeType":"301","messageId":"302","endLine":15,"endColumn":27},{"ruleId":"295","severity":1,"message":"303","line":9,"column":11,"nodeType":"297","messageId":"298","endLine":9,"endColumn":22},{"ruleId":"295","severity":1,"message":"304","line":35,"column":12,"nodeType":"297","messageId":"298","endLine":35,"endColumn":17},{"ruleId":"295","severity":1,"message":"305","line":37,"column":12,"nodeType":"297","messageId":"298","endLine":37,"endColumn":27},{"ruleId":"295","severity":1,"message":"306","line":41,"column":22,"nodeType":"297","messageId":"298","endLine":41,"endColumn":33},{"ruleId":"307","severity":1,"message":"308","line":97,"column":8,"nodeType":"309","endLine":97,"endColumn":20,"suggestions":"310"},{"ruleId":"295","severity":1,"message":"311","line":1,"column":21,"nodeType":"297","messageId":"298","endLine":1,"endColumn":30},{"ruleId":"295","severity":1,"message":"312","line":1,"column":32,"nodeType":"297","messageId":"298","endLine":1,"endColumn":40},{"ruleId":"295","severity":1,"message":"313","line":3,"column":10,"nodeType":"297","messageId":"298","endLine":3,"endColumn":13},{"ruleId":"295","severity":1,"message":"314","line":3,"column":15,"nodeType":"297","messageId":"298","endLine":3,"endColumn":18},{"ruleId":"295","severity":1,"message":"315","line":9,"column":11,"nodeType":"297","messageId":"298","endLine":9,"endColumn":17},{"ruleId":"295","severity":1,"message":"316","line":9,"column":8,"nodeType":"297","messageId":"298","endLine":9,"endColumn":21},{"ruleId":"295","severity":1,"message":"317","line":10,"column":10,"nodeType":"297","messageId":"298","endLine":10,"endColumn":17},{"ruleId":"295","severity":1,"message":"318","line":27,"column":11,"nodeType":"297","messageId":"298","endLine":27,"endColumn":17},{"ruleId":"319","severity":1,"message":"320","line":36,"column":31,"nodeType":"321","messageId":"322","endLine":36,"endColumn":57,"fix":"323"},{"ruleId":"307","severity":1,"message":"324","line":86,"column":8,"nodeType":"309","endLine":86,"endColumn":15,"suggestions":"325"},{"ruleId":"307","severity":1,"message":"326","line":93,"column":7,"nodeType":"309","endLine":93,"endColumn":15,"suggestions":"327"},{"ruleId":"295","severity":1,"message":"311","line":1,"column":21,"nodeType":"297","messageId":"298","endLine":1,"endColumn":30},{"ruleId":"295","severity":1,"message":"312","line":1,"column":32,"nodeType":"297","messageId":"298","endLine":1,"endColumn":40},{"ruleId":"295","severity":1,"message":"316","line":7,"column":8,"nodeType":"297","messageId":"298","endLine":7,"endColumn":21},{"ruleId":"295","severity":1,"message":"328","line":4,"column":10,"nodeType":"297","messageId":"298","endLine":4,"endColumn":21},{"ruleId":"295","severity":1,"message":"329","line":7,"column":10,"nodeType":"297","messageId":"298","endLine":7,"endColumn":21},{"ruleId":"295","severity":1,"message":"330","line":33,"column":11,"nodeType":"297","messageId":"298","endLine":33,"endColumn":24},{"ruleId":"295","severity":1,"message":"306","line":47,"column":22,"nodeType":"297","messageId":"298","endLine":47,"endColumn":33},{"ruleId":"299","severity":1,"message":"300","line":232,"column":28,"nodeType":"301","messageId":"302","endLine":232,"endColumn":30},{"ruleId":"307","severity":1,"message":"331","line":315,"column":8,"nodeType":"309","endLine":315,"endColumn":10,"suggestions":"332"},{"ruleId":"307","severity":1,"message":"333","line":326,"column":8,"nodeType":"309","endLine":326,"endColumn":36,"suggestions":"334"},{"ruleId":"295","severity":1,"message":"335","line":1,"column":17,"nodeType":"297","messageId":"298","endLine":1,"endColumn":19},{"ruleId":"295","severity":1,"message":"336","line":3,"column":8,"nodeType":"297","messageId":"298","endLine":3,"endColumn":13},{"ruleId":"307","severity":1,"message":"324","line":66,"column":8,"nodeType":"309","endLine":66,"endColumn":23,"suggestions":"337"},"@typescript-eslint/no-unused-vars","'createBrowserRouter' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'user' is assigned a value but never used.","'helps' is assigned a value but never used.","'isHoverDropdown' is assigned a value but never used.","'setSendTime' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'firstCounter' and 'getCities'. Either include them or remove the dependency array. You can also do a functional update 'setFirstCounter(f => ...)' if you only need 'firstCounter' in the 'setFirstCounter' call.","ArrayExpression",["338"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'scroll' is assigned a value but never used.","'axiosRequests' is defined but never used.","'API_URL' is defined but never used.","'isAuth' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property ['isMailing'] found.","Property","unnecessarilyComputedProperty",{"range":"339","text":"340"},"React Hook useEffect has a missing dependency: 'sendALLData'. Either include it or remove the dependency array.",["341"],"React Hook useEffect has missing dependencies: 'navigate' and 'redirectCounter'. Either include them or remove the dependency array.",["342"],"'selectValid' is defined but never used.","'selectLogin' is defined but never used.","'userDateRedux' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getMarginTop' and 'getWidth'. Either include them or remove the dependency array.",["343"],"React Hook useEffect has missing dependencies: 'counterSend', 'isLogin', 'sendData', and 'sendLogin'. Either include them or remove the dependency array.",["344"],"'FC' is defined but never used.","'Title' is defined but never used.",["345"],{"desc":"346","fix":"347"},[1823,1836],"'isMailing'",{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},"Update the dependencies array to be: [firstCounter, getCities, intervalId]",{"range":"358","text":"359"},"Update the dependencies array to be: [isReg, sendALLData]",{"range":"360","text":"361"},"Update the dependencies array to be: [isMail, navigate, redirectCounter]",{"range":"362","text":"363"},"Update the dependencies array to be: [getMarginTop, getWidth]",{"range":"364","text":"365"},"Update the dependencies array to be: [selectedReg, selectedLogin, counterSend, isLogin, sendLogin, sendData]",{"range":"366","text":"367"},"Update the dependencies array to be: [selectedLogin, sendALLData]",{"range":"368","text":"369"},[3428,3440],"[firstCounter, getCities, intervalId]",[3261,3268],"[isReg, sendALLData]",[3423,3431],"[isMail, navigate, redirectCounter]",[10914,10916],"[getMarginTop, getWidth]",[11143,11171],"[selectedReg, selectedLogin, counterSend, isLogin, sendLogin, sendData]",[2117,2132],"[selectedLogin, sendALLData]"]